//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.8-b130911.1802 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2017.08.05 at 12:57:11 PM CEST 
//


package net.bobah.ufixj.repository.phrases;

import javax.xml.bind.annotation.XmlEnum;
import javax.xml.bind.annotation.XmlEnumValue;
import javax.xml.bind.annotation.XmlType;


/**
 * <p>Java class for ComponentType_t.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * <p>
 * <pre>
 * &lt;simpleType name="ComponentType_t">
 *   &lt;restriction base="{}Name_t">
 *     &lt;enumeration value="BlockRepeating"/>
 *     &lt;enumeration value="Block"/>
 *     &lt;enumeration value="XMLDataBlock"/>
 *     &lt;enumeration value="Message"/>
 *     &lt;enumeration value="ImplicitBlockRepeating"/>
 *     &lt;enumeration value="ImplicitBlock"/>
 *     &lt;enumeration value="OptimisedImplicitBlockRepeating"/>
 *   &lt;/restriction>
 * &lt;/simpleType>
 * </pre>
 * 
 */
@XmlType(name = "ComponentType_t")
@XmlEnum
public enum ComponentTypeT {

    @XmlEnumValue("BlockRepeating")
    BLOCK_REPEATING("BlockRepeating"),
    @XmlEnumValue("Block")
    BLOCK("Block"),
    @XmlEnumValue("XMLDataBlock")
    XML_DATA_BLOCK("XMLDataBlock"),
    @XmlEnumValue("Message")
    MESSAGE("Message"),
    @XmlEnumValue("ImplicitBlockRepeating")
    IMPLICIT_BLOCK_REPEATING("ImplicitBlockRepeating"),
    @XmlEnumValue("ImplicitBlock")
    IMPLICIT_BLOCK("ImplicitBlock"),
    @XmlEnumValue("OptimisedImplicitBlockRepeating")
    OPTIMISED_IMPLICIT_BLOCK_REPEATING("OptimisedImplicitBlockRepeating");
    private final String value;

    ComponentTypeT(String v) {
        value = v;
    }

    public String value() {
        return value;
    }

    public static ComponentTypeT fromValue(String v) {
        for (ComponentTypeT c: ComponentTypeT.values()) {
            if (c.value.equals(v)) {
                return c;
            }
        }
        throw new IllegalArgumentException(v);
    }

}
